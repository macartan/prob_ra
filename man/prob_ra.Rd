% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prob_ra.R
\name{prob_ra}
\alias{prob_ra}
\title{prob_ra}
\usage{
prob_ra(prob = 0.5, blocks = NULL, n = NULL, shuffle_blocks = TRUE,
  shuffle_within_blocks = TRUE)
}
\arguments{
\item{prob}{assignment probability that is either (a) a scalar, the same for all units (b) a vector of length n (c) a n * k matrix with probabilities for k treatments}

\item{blocks}{block indicator of length n}

\item{n}{Number of units}

\item{shuffle_blocks}{logicial defaulting to TRUE randomly reorders blocks before applying sequential_ra}

\item{shuffle_within_blocks}{logicial defaulting to TRUE randomly reorders units within blocks before applying sequential_ra}
}
\description{
Complete random assignment with heterogeneous assignment probabilities and blocks.
}
\details{
Possibly multivalued treatments assigned.
}
\examples{
prob_ra(n = 10)
# For an assignment with prob = .5 and blocks = c(1,1,1,2,2,2) we require exactly 3 units
# chosen each time, though sometimes 1 from block 1 and 2 from block 2 and sometimes the opposite

reps <- replicate(1000, prob_ra(blocks = c(1,1,1,2,2,2)))
apply(reps, 1, mean)              # .5 probabilities for each unit
table(apply(reps, 2, sum))        # exactly 3 selected each time
table(apply(reps[1:3,], 2, sum))  # 1 or 2 in block 1 each time

# Illustration with three treatments
# Simple case
 prob = matrix(1/3, 12, 3)
 table(prob_ra(prob = prob))

# Uneven probabilities
p1 <- runif(20)
p2 <- runif(20)*(1-p1)
prob <- cbind(p1,p2, 1 - p1 - p2)
table(prob_ra(prob = prob))

# If row probabilities do not sume to 1 a residual condition is defined
p1 <- runif(20)
p2 <- runif(20)*(1-p1)
prob <- cbind(p1,p2)
table(prob_ra(prob = prob))

# Problematic cases.
sims <- 10000
prob <- t(matrix(c(.15,.65,.2, .47, .48, .05), 3,2))
# Results are demonstrably not as tight as possible since ideally there would be
# at least one unit in treatment 2 in each draw, but sometimes none hereâ€¦.
set.seed(17)
prob_ra(prob = prob)

# Though assignment probabilities are still correct.
runs <- sapply(1:sims, function(j) prob_ra(prob = prob))
round(sapply(1:3, function(j) apply(runs==j, 1, sum)), 2)/sims
}
