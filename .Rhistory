n
p
p
p = c(.3, .4, .9)
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if(sum(p) %% 1 < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(p) - sum(p))
n <- n+1
tag <- 1
}
p
p = c(.3, .4, .9)
n = NULL
if(is.null(n)) n <-  length(p)
n
length(p)
length(p)!=n
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
p
(sum(p) %% 1) < 0.00001
if((sum(p) %% 1) < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(p) - sum(p))
n <- n+1
tag <- 1
}
p
m
systematic_ra <- function(p = .5, n = NULL) {
# Housekeeping
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if((sum(p) %% 1) < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(sum(p)) - sum(p))
n <- n+1
tag <- 1
}
s   <- (cumsum(p) +m*runif(1))%%m
e   <- s - floor(s)
out <- 1*(e < c(e[n], e[-n]))
if(tag==1) out <- out[-n]
out
}
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
#' prob_ra function for single treatments
#'
#' Binary treatment assigned in blocks b with probability p
#'
#' @param p assignment probability of length n
#' @param b block indicator, of length n
#' @param n Number of units
#' @param tolerance parameter for rounding errors
#'
#' @examples
#' prob_ra_internal(n = 10)
#'
prob_ra_internal <- function(
p = .5,
b = NULL,
n = NULL,
tol = 10){
# Housekeeping
if(is.null(n)) {if(!is.null(b)) n <- length(b)
if( is.null(b) & length(p)>1)   n <- length(p)}
if(length(p) == 1) p <- rep(p, n)
if(is.null(b))     b <- rep(1, n)
p   <- round(p, tol)
if(ceiling(sum(p)) == 0) return(rep(0, length(p)))
# Figure out if we have to deal with a random total
base <- p - p%%1
p    <- p - base
# randomly order blocks then reorder within blocks
b_names   <- unique(b)
k         <- length(b_names)
seq1      <- rep(NA, length(b))
b_shuffle <- sample(1:k)
for(j in 1:k) seq1[b==b_names[j]] <- b_shuffle[j]
seq2      <- rank(seq1 + runif(n))
p[seq2]   <- p
# Now  do systematic assignment
out <- systematic_ra(p)
out <- out[seq2]
out + base
}
prob_ra_internal(n = 10)
prob_ra_internal(n = 10)
prob_ra_internal(n = 10)
prob_ra_internal(n = 10)
library(probra)
library(probra)
? prob_ra
library(probra)
? prob_ra
library(probra)
library(probra)
? prob_ra
sample(1:2, prob = c(.2, .8))
sample(1:2, 1, prob = c(.2, .8))
library(probra)
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
devtools::build_manual()
install.packages("remotes")
remotes::install_github("macartan/probra")
install.packages("remotes")
knitr::opts_chunk$set(echo = TRUE)
library(DeclareDesign)
# Population
N <- 5
# Takes data with x = coordinates and Z = direct status and determines if neighbors are treated
indirect_function <- function(data){
assigned <- unique(data$x * data$Z)
assigned <- assigned[(assigned !=0)]
data$neighbors <- ((data$x + 1) %in% assigned) + ((data$x - 1) %in% assigned)
data
}
pop        <- declare_population(N=5, u=rnorm(N), x = 1:N)
assignment <- declare_assignment(m=2)
indirect   <- declare_step(handler = indirect_function)
treatments <- declare_step(handler = fabricate,
dir = Z == 1,
ind1 = neighbors == 1,
ind2 = neighbors == 2)
outcome   <- declare_step(handler = fabricate, Y = .5* dir + .2 * ind2 + u)
estimands <- declare_estimand(DIR = .5, IND1 = 0, IND2 = .2)
estimates <- declare_estimator(Y~dir, estimand = "DIR")
design <- pop + assignment + indirect + treatments + outcome + estimands + estimates
data <- draw_data(design)
design
diagnose_design(design, sims = 100)
draw_estimates(design)
draw_estimands(design)
#replicate(15, data <- draw_data(design)$dir)
#replicate(15, data <- draw_data(design)$ind2)
obs_exposure <- data[,c("dir","ind1", "ind2")]
obs_outcome <- data$Y
reps <- function(){
data <- draw_data(design)
list(DIR=data$dir, IND1=data$ind1, IND2=data$ind2)
}
I_exposure <- list()
exposure   <-  replicate(15, reps(), simplify=FALSE)
exposure
length(exposure)
I_exposure$DIR  <- sapply(exposure, function(exp) exp$DIR)
I_exposure$DIR
j = 1
k = 1
J <-  I_exposure[[j]]
K <-  I_exposure[[k]]
J
J <-  I_exposure[[j]]
K <-  I_exposure[[k]]
s <- ncol(J)
apply(JJ, 1, function(jj)  apply(I, 1, function(ii) sum(ii*jj)))
apply(J, 1, function(jj)  apply(I, 1, function(ii) sum(ii*jj)))
J
apply(J, 1, length())
apply(J, 1, length
)
apply(J, 1, function(jj)  {apply(I, 1, function(ii) sum(ii*jj))})
jj <- J[1,]
jj
ii <- I[1,]
apply(J, 1, function(jj)  {apply(K, 1, function(kk) sum(jj*kk))})
apply(J, 1, function(jj)  {apply(K, 1, function(kk) mean(jj*kk))})
DIR_IND1 <- joint_prob(1,2)
joint_prob <- function(j,k){
J <-  I_exposure[[j]]
K <-  I_exposure[[k]]
apply(J, 1, function(jj)  {apply(K, 1, function(kk) mean(jj*kk))})
}
DIR_DIR <- joint_prob(1,1)
IND1_IND1 <- joint_prob(2,2)
k = j = 2
J <-  I_exposure[[j]]
length(I_exposure)
I_exposure <- list()
exposure   <-  replicate(15, reps(), simplify=FALSE)
I_exposure$DIR  <- sapply(exposure, function(exp) exp$DIR)
I_exposure$IND1 <- sapply(exposure, function(exp) exp$IND1)
I_exposure$IND2 <- sapply(exposure, function(exp) exp$IND2)
joint_prob <- function(j,k){
J <-  I_exposure[[j]]
K <-  I_exposure[[k]]
apply(J, 1, function(jj)  {apply(K, 1, function(kk) mean(jj*kk))})
}
DIR_DIR <- joint_prob(1,1)
IND1_IND1 <- joint_prob(2,2)
IND1_IND1
IND2_IND2 <- joint_prob(3,3)
IND1_IND2 <- joint_prob(1,2)
IND1_IND2
joint_prob(2,3)
joint_prob(3,2)
DIR_DIR
knitr::opts_chunk$set(echo = TRUE)
library(DeclareDesign)
library(knitr)
lapply(prob_matrices, kable)
knitr::opts_chunk$set(echo = TRUE)
library(DeclareDesign)
library(knitr)
# Population
N <- 5
# Takes data with x = coordinates and Z = direct status and determines if neighbors are treated
indirect_function <- function(data){
assigned <- unique(data$x * data$Z)
assigned <- assigned[(assigned !=0)]
data$neighbors <- ((data$x + 1) %in% assigned) + ((data$x - 1) %in% assigned)
data
}
pop        <- declare_population(N=5, u=rnorm(N), x = 1:N)
assignment <- declare_assignment(m=2)
indirect   <- declare_step(handler = indirect_function)
treatments <- declare_step(handler = fabricate,
dir = Z == 1,
ind1 = neighbors == 1,
ind2 = neighbors == 2)
outcome   <- declare_step(handler = fabricate, Y = .5* dir + .2 * ind2 + u)
estimands <- declare_estimand(DIR = .5, IND1 = 0, IND2 = .2)
estimates <- declare_estimator(Y~dir, estimand = "DIR")
design <- pop + assignment + indirect + treatments + outcome + estimands + estimates
data <- draw_data(design)
design
diagnose_design(design, sims = 100)
draw_estimates(design)
draw_estimands(design)
#replicate(15, data <- draw_data(design)$dir)
#replicate(15, data <- draw_data(design)$ind2)
obs_exposure <- data[,c("dir","ind1", "ind2")]
obs_outcome <- data$Y
reps <- function(){
data <- draw_data(design)
list(DIR=data$dir, IND1=data$ind1, IND2=data$ind2)
}
I_exposure <- list()
exposure   <-  replicate(15, reps(), simplify=FALSE)
I_exposure$DIR  <- sapply(exposure, function(exp) exp$DIR)
I_exposure$IND1 <- sapply(exposure, function(exp) exp$IND1)
I_exposure$IND2 <- sapply(exposure, function(exp) exp$IND2)
joint_prob <- function(j,k){
J <-  I_exposure[[j]]
K <-  I_exposure[[k]]
apply(J, 1, function(jj)  {apply(K, 1, function(kk) mean(jj*kk))})
}
prob_matrices <- list(
DIR_DIR = joint_prob(1,1),
IND1_IND1 = joint_prob(2,2),
IND2_IND2 = joint_prob(3,3),
DIR_IND1 = joint_prob(1,2),
DIR_IND2 = joint_prob(1,3),
IND1_IND2 = joint_prob(2,3))
lapply(prob_matrices, kable)
, results="asis"
lapply(prob_matrices, kable)
lapply(prob_matrices, kable)
knitr::opts_chunk$set(echo = TRUE)
library(DeclareDesign)
library(knitr)
# Population
N <- 5
# Takes data with x = coordinates and Z = direct status and determines if neighbors are treated
indirect_function <- function(data){
assigned <- unique(data$x * data$Z)
assigned <- assigned[(assigned !=0)]
data$neighbors <- ((data$x + 1) %in% assigned) + ((data$x - 1) %in% assigned)
data
}
pop        <- declare_population(N=5, u=rnorm(N), x = 1:N)
assignment <- declare_assignment(m=2)
indirect   <- declare_step(handler = indirect_function)
treatments <- declare_step(handler = fabricate,
dir = Z == 1,
ind1 = neighbors == 1,
ind2 = neighbors == 2)
outcome   <- declare_step(handler = fabricate, Y = .5* dir + .2 * ind2 + u)
estimands <- declare_estimand(DIR = .5, IND1 = 0, IND2 = .2)
estimates <- declare_estimator(Y~dir, estimand = "DIR")
design <- pop + assignment + indirect + treatments + outcome + estimands + estimates
data <- draw_data(design)
diagnose_design(design, sims = 100)
draw_estimates(design)
draw_estimands(design)
#replicate(15, data <- draw_data(design)$dir)
#replicate(15, data <- draw_data(design)$ind2)
obs_exposure <- data[,c("dir","ind1", "ind2")]
obs_outcome <- data$Y
reps <- function(){
data <- draw_data(design)
list(DIR=data$dir, IND1=data$ind1, IND2=data$ind2)
}
I_exposure <- list()
exposure   <-  replicate(15, reps(), simplify=FALSE)
I_exposure$DIR  <- sapply(exposure, function(exp) exp$DIR)
I_exposure$IND1 <- sapply(exposure, function(exp) exp$IND1)
I_exposure$IND2 <- sapply(exposure, function(exp) exp$IND2)
joint_prob <- function(j,k){
J <-  I_exposure[[j]]
K <-  I_exposure[[k]]
out <- apply(J, 1, function(jj)  {apply(K, 1, function(kk) mean(jj*kk))})
colnames(out) <- rownames(out) <- 1:nrow(J)
out
}
prob_matrices <- list(
DIR_DIR = joint_prob(1,1),
IND1_IND1 = joint_prob(2,2),
IND2_IND2 = joint_prob(3,3),
DIR_IND1 = joint_prob(1,2),
DIR_IND2 = joint_prob(1,3),
IND1_IND2 = joint_prob(2,3))
for(x in prob_matrices) kable(x)
prob_matrices
round(prob_matrices,2)
lapply(prob_matrices, kable, digits = 2)
exposure[[1]]
length(exposure)
I_exposure$DIR
apply(I_exposure$DIR , 1, mean)
apply(I_exposure$DIR * I_exposure$DIR , 1, mean)
I_exposure$DIR
complex_conditions <- function(dir, ind1, ind2){
(I_exposure$DIR == dir) * (I_exposure$IND1 == ind1) * (I_exposure$IND2 == ind2)
}
complex_conditions(1,1,0)
I_exposure$IND2
I_exposure$IND1
I_exposure$DIR
complex_conditions(1,1,0)
complex_conditions(1,1,0)
prob_both_profile <- function(dir_k, ind1_k, ind2_k,
dir_l, ind1_l, ind2_l){
K <- complex_conditions(dir_k, ind1_k, ind2_k)
L <- complex_conditions(dir_l, ind1_l, ind2_l)
out <- apply(K, 1, function(kk)  {apply(L, 1, function(ll) mean(kk*ll))})
colnames(out) <- rownames(out) <- 1:nrow(K)
out
}
prob_both_profile(1,1,0, 1,1,0)
2^6
prob_both_profile(1,1,1, 1,1,1)
prob_both_profile(1,0,1, 1,0,1)
prob_both_profile(0,0,1, 0,0,1)
View(obs_prob_exposure)
obs_prob_exposure <- list(
l_exposure = list(
complex_conditions(1,1),
complex_conditions(1,0),
complex_conditions(0,1),
complex_conditions(0,0)),
prob_exposure_k_k  = list(
prob_both_profile(1,1,NULL, 1,1,NULL),
prob_both_profile(1,0,NULL, 1,0,NULL),
prob_both_profile(0,1,NULL, 0,1,NULL),
prob_both_profile(0,0,NULL, 0,0,NULL),
)
prob_exposure_k_l  = list(
prob_both_profile
complex_conditions <- function(dir, ind1, ind2 = NULL){
if(is.null(ind2)) return((I_exposure$DIR == dir) * (I_exposure$IND1 == ind1))
(I_exposure$DIR == dir) * (I_exposure$IND1 == ind1) * (I_exposure$IND2 == ind2)
}
complex_conditions(1,1,0)
prob_both_profile <- function(
dir_k, ind1_k, ind2_k = NULL,
dir_l, ind1_l, ind2_l = NULL){
K <- complex_conditions(dir_k, ind1_k, ind2_k)
L <- complex_conditions(dir_l, ind1_l, ind2_l)
out <- apply(K, 1, function(kk)  {apply(L, 1, function(ll) mean(kk*ll))})
colnames(out) <- rownames(out) <- 1:nrow(K)
out
}
prob_both_profile(1,1,0, 1,1,0)
l_exposure = list(
complex_conditions(1,1),
complex_conditions(1,0),
complex_conditions(0,1),
complex_conditions(0,0))
prob_exposure_k_k  = list(
prob_both_profile(1,1,NULL, 1,1,NULL),
prob_both_profile(1,0,NULL, 1,0,NULL),
prob_both_profile(0,1,NULL, 0,1,NULL),
prob_both_profile(0,0,NULL, 0,0,NULL),
)
prob_exposure_k_k  = list(
prob_both_profile(1,1,NULL, 1,1,NULL),
prob_both_profile(1,0,NULL, 1,0,NULL),
prob_both_profile(0,1,NULL, 0,1,NULL),
prob_both_profile(0,0,NULL, 0,0,NULL)
)
prob_exposure_k_l  = list(
prob_both_profile(1,1,NULL, 1,0,NULL),
prob_both_profile(1,1,NULL, 0,1,NULL)  # NEED THE REST
)
obs_prob_exposure <- list(
l_exposure = list(
complex_conditions(1,1),
complex_conditions(1,0),
complex_conditions(0,1),
complex_conditions(0,0)),
prob_exposure_k_k  = list(
prob_both_profile(1,1,NULL, 1,1,NULL),
prob_both_profile(1,0,NULL, 1,0,NULL),
prob_both_profile(0,1,NULL, 0,1,NULL),
prob_both_profile(0,0,NULL, 0,0,NULL)
)
prob_exposure_k_l  = list(
obs_prob_exposure <- list(
l_exposure = list(
complex_conditions(1,1),
complex_conditions(1,0),
complex_conditions(0,1),
complex_conditions(0,0)),
prob_exposure_k_k  = list(
prob_both_profile(1,1,NULL, 1,1,NULL),
prob_both_profile(1,0,NULL, 1,0,NULL),
prob_both_profile(0,1,NULL, 0,1,NULL),
prob_both_profile(0,0,NULL, 0,0,NULL)
),
prob_exposure_k_l  = list(
prob_both_profile(1,1,NULL, 1,0,NULL),
prob_both_profile(1,1,NULL, 0,1,NULL)  # NEED THE REST
)
)
View(obs_prob_exposure)
library(probra)
? prob_ra
n = 10
probra::systematic_ra(n = n, prob = 8/n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1]
sapply(10:20, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1])
sizes <- 10:20
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1]
cbind(sizes = sizes, selection)
data.frame(sizes = sizes, selection)
sizes <- 10:20
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1]
data.frame(sizes = sizes, selection)
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1]
)
data.frame(sizes = sizes, selection)
selection
data.frame(sizes = sizes, t(selection))
sizes <- 10:30
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1])
data.frame(sizes = sizes, t(selection))
sizes <- 10:30
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1])
data.frame(sizes = sizes, t(selection))
sizes <- 10:30
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1])
data.frame(sizes = sizes, t(selection))
sizes <- 10:30
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1])
data.frame(sizes = sizes, t(selection))
sizes <- 10:30
selection <- sapply(sizes, function(n)
(1:n)[probra::systematic_ra(n = n, prob = 8/n) == 1])
data.frame(sizes = sizes, t(selection))
library(probra)
model <- make_model("X -> M1 -> Y <- M2 <- X") %>%
set_restrictions(c(decreasing("X", "M1"), decreasing("M1", "Y"),
decreasing("X", "M2"), decreasing("M2", "Y"))) %>%
set_parameters(nodes = c(M1, M2), alphas = list(c(0,0,1,0), c(.5, 0,0,.5)
)
)
library(gbiqq)
model <- make_model("X -> M1 -> Y <- M2 <- X") %>%
set_restrictions(c(decreasing("X", "M1"), decreasing("M1", "Y"),
decreasing("X", "M2"), decreasing("M2", "Y"))) %>%
set_parameters(nodes = c(M1, M2), alphas = list(c(0,0,1,0), c(.5, 0,0,.5)))
decreasing("X", "M1")
? make_parameters
? make_priors
library(probra)
