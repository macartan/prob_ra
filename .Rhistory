? rbinom
systematic_ra <- function(p = .5, n = NULL, m = NULL) {
# Housekeeping
if(is.null(n)) n <-  length(p)
if(is.null(m)) m <- floor(sum(p)) + rbinom(1, 1, sum(p) - floor(sum(p)))
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
s   <- (cumsum(p) +m*runif(1))%%m
e   <- s - floor(s)
1*(e < c(e[n], e[-n]))
}
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
p = .5
m = NULL
n = 10
if(is.null(n)) n <-  length(p)
if(is.null(m)) m <- floor(sum(p)) + rbinom(1, 1, sum(p) - floor(sum(p)))
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
n
m
m = NULL
if(is.null(n)) n <-  length(p)
if(is.null(m)) m <- floor(sum(p)) + rbinom(1, 1, sum(p) - floor(sum(p)))
m
p
sum(p) - floor(sum(p))
sum(p) - floor(sum(p))
sum(p) - floor(sum(p))
rbinom(1, 1, sum(p) - floor(sum(p)))
sum(p)
m = NULL
n = NULL
p = .5
n = 10
if(is.null(n)) n <-  length(p)
n
m
if(is.null(m)) m <- floor(sum(p)) + rbinom(1, 1, sum(p) - floor(sum(p)))
m
sum(p)
systematic_ra <- function(p = .5, n = NULL, m = NULL) {
# Housekeeping
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if(is.null(m)) m <- floor(sum(p)) + rbinom(1, 1, sum(p) - floor(sum(p)))
s   <- (cumsum(p) +m*runif(1))%%m
e   <- s - floor(s)
1*(e < c(e[n], e[-n]))
}
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(p = c(.3, .4, , 9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
p = c(.3, .4, .9)
n = NULL
m = NULL
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if(is.null(m)) m <- floor(sum(p)) + rbinom(1, 1, sum(p) - floor(sum(p)))
s   <- (cumsum(p) +m*runif(1))%%m
e   <- s - floor(s)
e
p
cumsum(p)
sum(p) %% 1
#' systematic_ra(p = c(.3, .4, .9))
systematic_ra <- function(p = .5, n = NULL) {
# Housekeeping
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if(sum(p) %% 1 < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(p) - sum(p))
n <- n+1
tag <- 1
}
s   <- (cumsum(p) +m*runif(1))%%m
e   <- s - floor(s)
out <- 1*(e < c(e[n], e[-n]))
if(tag==1) out <- out[-n]
out
}
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
n = NULL
p = c(.3, .4, .9)
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if(sum(p) %% 1 < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(p) - sum(p))
n <- n+1
tag <- 1
}
tag
n
p
p
p = c(.3, .4, .9)
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if(sum(p) %% 1 < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(p) - sum(p))
n <- n+1
tag <- 1
}
p
p = c(.3, .4, .9)
n = NULL
if(is.null(n)) n <-  length(p)
n
length(p)
length(p)!=n
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
p
(sum(p) %% 1) < 0.00001
if((sum(p) %% 1) < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(p) - sum(p))
n <- n+1
tag <- 1
}
p
m
systematic_ra <- function(p = .5, n = NULL) {
# Housekeeping
if(is.null(n)) n <-  length(p)
if(length(p)!=n) {if(length(p)!=1) stop("Incompatible lengths for n and p")
p <- rep(p, n)}
if((sum(p) %% 1) < 0.00001) {
m <- sum(p)
tag = 0
} else {
m <- ceiling(sum(p))
p <- c(p, ceiling(sum(p)) - sum(p))
n <- n+1
tag <- 1
}
s   <- (cumsum(p) +m*runif(1))%%m
e   <- s - floor(s)
out <- 1*(e < c(e[n], e[-n]))
if(tag==1) out <- out[-n]
out
}
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(p = c(.3, .4, .9))
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
systematic_ra(n = 10)
#' prob_ra function for single treatments
#'
#' Binary treatment assigned in blocks b with probability p
#'
#' @param p assignment probability of length n
#' @param b block indicator, of length n
#' @param n Number of units
#' @param tolerance parameter for rounding errors
#'
#' @examples
#' prob_ra_internal(n = 10)
#'
prob_ra_internal <- function(
p = .5,
b = NULL,
n = NULL,
tol = 10){
# Housekeeping
if(is.null(n)) {if(!is.null(b)) n <- length(b)
if( is.null(b) & length(p)>1)   n <- length(p)}
if(length(p) == 1) p <- rep(p, n)
if(is.null(b))     b <- rep(1, n)
p   <- round(p, tol)
if(ceiling(sum(p)) == 0) return(rep(0, length(p)))
# Figure out if we have to deal with a random total
base <- p - p%%1
p    <- p - base
# randomly order blocks then reorder within blocks
b_names   <- unique(b)
k         <- length(b_names)
seq1      <- rep(NA, length(b))
b_shuffle <- sample(1:k)
for(j in 1:k) seq1[b==b_names[j]] <- b_shuffle[j]
seq2      <- rank(seq1 + runif(n))
p[seq2]   <- p
# Now  do systematic assignment
out <- systematic_ra(p)
out <- out[seq2]
out + base
}
prob_ra_internal(n = 10)
prob_ra_internal(n = 10)
prob_ra_internal(n = 10)
prob_ra_internal(n = 10)
library(probra)
library(probra)
? prob_ra
library(probra)
? prob_ra
